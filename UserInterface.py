# The following code was generated by ChatGPT as a generic GUI framework, and then expanded upon
# for the purposes of this project.

import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QCheckBox, QPushButton, QLabel
import RealTimeData
import os
import threading
import time

env = os.environ.copy()
env["PYTHONPATH"] = "scripts"

class Script:
    is_running = False
    logging = []

class MyGUI(QWidget):

    def __init__(self):
        super().__init__()
        self.init_ui()
        self.script_process = None

        #Set initial window size
        self.resize(300,200)

    def init_ui(self):

        layout = QVBoxLayout()

        self.Title = QLabel("Select values to log:")
        layout.addWidget(self.Title)

        # Create checkboxes of options for logging
        self.checkbox1 = QCheckBox("RPM")
        self.checkbox1.setChecked(False)
        layout.addWidget(self.checkbox1)

        self.checkbox2 = QCheckBox("Throttle")
        self.checkbox2.setChecked(False)
        layout.addWidget(self.checkbox2)

        self.checkbox3 = QCheckBox("Brake")
        self.checkbox3.setChecked(False)
        layout.addWidget(self.checkbox3)

        self.checkbox4 = QCheckBox("Speed")
        self.checkbox4.setChecked(False)
        layout.addWidget(self.checkbox4)

        self.checkbox5 = QCheckBox("Current Lap Time")
        self.checkbox5.setChecked(False)
        layout.addWidget(self.checkbox5)

        self.checkbox6 = QCheckBox("Fuel level")
        self.checkbox6.setChecked(False)
        layout.addWidget(self.checkbox6)

        self.checkbox7 = QCheckBox("Lateral G")
        self.checkbox7.setChecked(False)
        layout.addWidget(self.checkbox7)

        self.checkbox8 = QCheckBox("Longitudinal G")
        self.checkbox8.setChecked(False)
        layout.addWidget(self.checkbox8)

        self.checkbox9 = QCheckBox("Last Lap Time")
        self.checkbox9.setChecked(False)
        layout.addWidget(self.checkbox9)

        self.checkbox12 = QCheckBox("Track Temp")
        self.checkbox12.setChecked(False)
        layout.addWidget(self.checkbox12)

        self.checkbox13 = QCheckBox("Lap Number")
        self.checkbox13.setChecked(False)
        layout.addWidget(self.checkbox13)

        self.checkbox14 = QCheckBox("Session Type")
        self.checkbox14.setChecked(False)
        layout.addWidget(self.checkbox14)

        self.checkbox15 = QCheckBox("Gear")
        self.checkbox15.setChecked(False)
        layout.addWidget(self.checkbox15)

        self.checkboxAll = QCheckBox("Select All/None")
        self.checkboxAll.setChecked(False)
        self.checkboxAll.stateChanged.connect(self.on_stateChanged)
        layout.addWidget(self.checkboxAll)


        # Create a button to run the script
        self.run_button = QPushButton("Run Script")
        self.run_button.clicked.connect(self.run_script)
        layout.addWidget(self.run_button)

        # Create a button to stop the script
        self.stop_button = QPushButton("Kill Script")
        self.stop_button.clicked.connect(self.stop_script)
        self.stop_button.setEnabled(False)
        layout.addWidget(self.stop_button)

        self.status_label = QLabel("Script Status: Not Running")
        layout.addWidget(self.status_label)

        self.setLayout(layout)

        self.setWindowTitle("iR-RTD")

        self.checkBoxes = [self.checkbox1, self.checkbox2, self.checkbox3,self.checkbox4, self.checkbox5,
                            self.checkbox6,self.checkbox7, self.checkbox8, self.checkbox9,
                            self.checkbox12,self.checkbox13, self.checkbox14,self.checkbox15]

    def on_stateChanged(self, state):
        for checkbox in self.checkBoxes:
            checkbox.setCheckState(state)

    def get_check_state(self): # function to check which boxes have been ticked.
        checked = []
        for box in self.checkBoxes:
            if box.isChecked() == True:
                checked.append(box.text())
        return checked

    def run_script(self):
        if self.script_process is None:
            checkedBoxes = self.get_check_state() # get state of checkboxes to pass to logger
            RealTimeData.init_iR(checkedBoxes)

            self.run_button.setEnabled(False)
            self.stop_button.setEnabled(True)
            self.script_process = True
            self.status_label.setText(f"Script Status: Running")

    def stop_script(self):
        if self.script_process is not None:
            self.script_process = None
            RealTimeData.kill_script()
            self.run_button.setEnabled(True)
            self.stop_button.setEnabled(False)
            self.status_label.setText(f"Script Status: Stopped")

    def stop_script_test():
        global running
        running = False

    def run_script_test(self):
        running = True
        checkedBoxes = self.get_check_state()
        script_thread = threading.Thread(target=RealTimeData.init_iR, args = (checkedBoxes))

        script_thread.start()

if __name__ == '__main__':
    app = QApplication(sys.argv)

    gui = MyGUI()
    gui.show()

    sys.exit(app.exec_())
